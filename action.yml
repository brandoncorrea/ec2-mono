name: EC2 Mono
description: FIXME

inputs:
  aws-access-key-id:
    description: Your AWS Access Key ID
    required: true
  aws-secret-access-key:
    description: Your AWS Secret Access Key
    required: true
  aws-region:
    description: The AWS region being deploy to
    required: false
    default: us-east-1
  aws-image-id:
    description: The image to build the instance from (Default is Ubuntu 24.04)
    required: false
    default: ami-04a81a99f5ec58529
  aws-instance-type:
    description: The type of instance you'd like to use
    required: false
    default: t2.micro
  aws-security-group-ids:
    description: Any security groups you'd like to include on the instance. One of these will need to have SSH access.
    required: true
  aws-key-name:
    description: The name of the SSH key created in AWS
    required: true
  ssh-private-key:
    description: The private key associated with aws-key-name
    required: true
  ssh-user:
    description: The user that will be installing the application
    required: false
    default: ubuntu
  app-name:
    description: A unique name for your application. Pair with env-name to make unique among all of your deployed services.
    required: true
  env-name:
    description: A unique environment for your application. Pair with app-name to make unique among all of your deployed services.
    required: true
  install:
    description: The commands required to install and run your application
    required: false
    default: ''

runs:
  using: 'composite'

  steps:
    - uses: actions/checkout@v4

    - name: Install AWS CLI
      shell: sh
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Get old instance IDs
      shell: sh
      run: |
        EC2_OLD_INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:app,Values=${{ inputs.app-name }}" "Name=tag:env,Values=${{ inputs.env-name }}" "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" \
          --query 'Reservations[*].Instances[*].InstanceId' \
          --output text | tr '\n' ' ')
        echo "EC2_OLD_INSTANCE_IDS=$EC2_OLD_INSTANCE_IDS" >> $GITHUB_ENV

    - name: Deploy new EC2 instance
      shell: sh
      run: |
        EC2_NEW_INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ inputs.aws-image-id }} \
          --count 1 \
          --instance-type ${{ inputs.aws-instance-type }} \
          --key-name ${{ inputs.aws-key-name }} \
          --security-group-ids ${{ inputs.aws-security-group-ids }} \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=app,Value=${{ inputs.app-name }}},{Key=env,Value=${{ inputs.env-name }}}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "EC2_NEW_INSTANCE_ID=$EC2_NEW_INSTANCE_ID" >> $GITHUB_ENV

    - name: Wait for Instance to Start
      shell: sh
      run: |
        aws ec2 wait instance-running --instance-ids ${{ env.EC2_NEW_INSTANCE_ID }}
        aws ec2 wait instance-status-ok --instance-ids ${{ env.EC2_NEW_INSTANCE_ID }}

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}

    - name: Scan SSH Keys
      shell: sh
      run: |
        EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.EC2_NEW_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

    - name: Install Service
      shell: sh
      run: |
        WORKING_DIRECTORY=$(pwd)
        scp -r $WORKING_DIRECTORY ${{ inputs.ssh-user }}@${{ env.EC2_PUBLIC_IP }}:~/${{ inputs.app-name }}
        ssh -T ${{ inputs.ssh-user }}@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          cd ${{ inputs.app-name }}

          echo "Updating Package Manager"
          sudo apt-get update -y

          echo "Upgrading Package Manager"
          sudo apt-get upgrade -y

          ${{ inputs.install }}
        EOF

    - name: Wait for instance to be ready
      uses: iFaxity/wait-on-action@v1.2.1
      with:
        resource: https://${{ env.EC2_PUBLIC_IP }}
        interval: 1000
        timeout: 600000

    - name: Allocate Elastic IP Address
      shell: sh
      run: |
        ALLOCATION_ID=$(aws ec2 describe-addresses \
          --filters "Name=tag:app,Values=${{ inputs.app-name }}" "Name=tag:env,Values=${{ inputs.env-name }}" \
          --query 'Addresses[0].AllocationId' \
          --output text)
        aws ec2 associate-address --instance-id ${{ env.EC2_NEW_INSTANCE_ID }} --allocation-id $ALLOCATION_ID

    - name: Delete old instances if they exist
      if: env.EC2_OLD_INSTANCE_IDS != ''
      shell: sh
      run: aws ec2 terminate-instances --instance-ids ${{ env.EC2_OLD_INSTANCE_IDS }}

    - name: Cleanup new instance if job fails
      if: failure() && env.EC2_NEW_INSTANCE_ID != ''
      shell: sh
      run: aws ec2 terminate-instances --instance-ids ${{ env.EC2_NEW_INSTANCE_ID }}
